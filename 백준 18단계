# 스택

(1)
def push(li, x, t):
  li.append(x)
  return t+1
def pop(li, t):
  if t==-1:
    return -1, t;
  value = li[t]
  li[t:t+1] = []
  return value, t-1
def size(li):
  return len(li)
def empty(li):
  if len(li)==0:
    return 1
  return 0
def topf(li):
  if len(li)==0:
    return -1
  return li[-1]

stack = []
top = -1
for _ in range(int(input())):
  order = input()
  if order[-1].isdigit():
    top = push(stack, int(order.split()[1]), top)
  else:
    if order=='pop':
      v, top = pop(stack, top)
      print(v)
    elif order=='size':
      print(size(stack))
    elif order=='empty':
      print(empty(stack))
    else:
      print(topf(stack))

(2)
# 0==pop
total=0
stack=[]
for _ in range(int(input())):
  num=int(input())
  if num==0:
    count=len(stack)
    total-=stack[count-1]
    stack[count-1:count]=[]
  else:
    total+=num
    stack.append(num)
print(total)

(3)
# 괄호
# 출력형식 잘 확인하자 대문자 소문자!
T=int(input())
for t in range(T):
  stack=[]
  string=input()
  for ch in string:
    if ch=='(':
      stack.append(ch)
    else:
      if stack:
        stack.pop()
      else:
        stack.append(ch)
        break
  if stack:
    print("NO")
  else:
    print("YES")

(4)
# 소괄호 대괄호
# 각 opening Parenthesis에 대해서 인덱스를 저장해서
# 괄호사이에 unMatched 괄호가 있는지 확인
while True:
  string = input()
  if string=='.':
    break
  stack1=[]
  stack2=[]
  i=0
  for ch in string:
    if ch=='(':
      stack1.append(i)
    elif ch==')':
      if stack1:
        if stack2:
          if stack1[-1] > stack2[-1]:
            stack1.pop()
          else:
            break
        else:
          stack1.pop()
      else:
        stack1.append(ch)
        break
    elif ch=='[':
      stack2.append(i)
    elif ch==']':
      if stack2:
        if stack1:
          if stack1[-1] < stack2[-1]:
            stack2.pop()
          else:
            break
        else:
          stack2.pop()
      else:
        stack2.append(ch)
        break
    i+=1
  if len(stack1)==0 and len(stack2)==0:
    print('yes')
  else:
    print('no')

(5)
# 스택 수열
end = int(input())
targets = []
answer = []
stack=[]
ops=[]
for i in range(end):
  targets.append(int(input()))
t=0       #Index of Target
top=-1    #Index of Stack
cur=1     #Index of PushingNumber
while cur<end+2:
  if cur==1:
    stack.append(cur)
    ops.append('+')
    top+=1
    cur+=1
  elif cur==end+1:
    while len(stack) > 0:
      answer.append(stack.pop())
      ops.append('-')
    cur+=1
  else:
    if top==-1:
      stack.append(cur)
      ops.append('+')
      top+=1
      cur+=1
    else:
      if stack[top]!=targets[t]:
        stack.append(cur)
        ops.append('+')
        top+=1
        cur+=1
      else:
        answer.append(stack.pop())
        ops.append('-')
        top-=1
        t+=1
if targets==answer:
  for i in range(end*2):
    print(ops[i])
else:
  print("NO")
