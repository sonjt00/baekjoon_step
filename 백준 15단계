# 약수, 배수와 소수 2

(1)
def compo(num):
  parts = {};
  temp = num;
  while temp > 1:
    for i in range(2, int(num/2) +1):
      if temp % i == 0:
        if i in parts.keys():
          parts[i] += 1;
        else:
          parts[i] = 1;
        temp /= i;
        break;
    if len(parts) == 0:
      break;
  if len(parts) == 0:
    parts[num] = 1;
  return parts;
    
for _ in range(int(input())):
  A, B = map(int, input().split());
  ret = A * B;
  part = compo(ret);
  for k in part.keys():
    if part[k] > 1:
      while True:
        temp = ret / k
        if temp%A==0 and temp%B==0:
          part[k] -= 1;
          ret = temp;
        else:
          break;
  print(int(ret));

(2)
def compo(num):
  parts = {};
  temp = num;
  while temp > 1:
    for i in range(2, int(num/2) +1):
      if temp % i == 0:
        if i in parts.keys():
          parts[i] += 1;
        else:
          parts[i] = 1;
        temp /= i;
        break;
    if len(parts) == 0:
      break;
  if len(parts) == 0:
    parts[num] = 1;
  return parts;

a, b = map(int, input().split());
ret = a * b;
part = compo(ret);
for k in part.keys():
  if part[k] > 1:
    while True:
      temp = ret / k
      if temp%a==0 and temp%b==0:
        part[k] -= 1;
        ret = temp;
      else:
        break;
print(int(ret))

(3)
"""
유클리드 호제법
A B (A>B) 가 주어졌을 때
A가 B로 나누어 떨어지지 않는다면
B또한 A를 B로 나누었을 때의 나머지이기에,
(1) A % B = C
(2) B % C = D
(3) C % D = E

의 과정을 나머지가 0이 될 때까지 반복했을 때,
나머지를 0으로 만든 몫이
A, B 의 최대공약수가 된다.
# 이는 A % B ==0 일 때에도 만족한다.
# 나머지가 1이라면, 공약수가 존재하지 않음
"""
def Euclidean_CD(A, B):
  while A % B != 0:
    A, B = B, A % B;
  return B
def Euclidean_CM(A, B):
  Divisor = Euclidean_CD(A, B);
  return Divisor  * (A // Divisor) * (B//Divisor);
A, B = sorted(map(int, input().split()), reverse=True);
print(Euclidean_CM(A, B));

(4)
A, B = map(int, input().split());
C, D = map(int, input().split());
cd = -1;
l, s = sorted([B, D], reverse=True);
while True:
  if s == 1:
    break;
  if l % s == 0:
    cd = s;
    break
  l, s = s, l % s;
if cd == -1:
  temp = B;
  A *= D; B *= D;
  C *= temp; D *= temp;
else:
  cm = cd * (B//cd) * (D//cd);
  A *= cm/B; C *= cm/D;
  B = cm; D = cm;

son = A+C;
par = B;
cd = -1;
l, s = sorted([son, par], reverse=True);
while True:
  if s == 1:
    break;
  if l % s ==0:
    cd = s;
    break;
  l, s = s, l %s;
if cd == -1:
  print("%d %d" %(son, par));
else:
  print("%d %d" %(son/cd, par/cd));

(5)
N = int(input());
trees = [];
diffs = [];
for i in range(N):
  trees.append(int(input()));
  if i > 0:
    diffs.append(trees[i] - trees[i-1]);
diff_s = sorted(set(diffs), reverse=True);
cd = 0;


if len(diff_s) == 1:
  cd = 0;
elif len(diff_s) == 2:
  left = diff_s[0];
  right = diff_s[1];
  while True:
    r = left % right;
    if r == 0:
      cd = right;
      break;
    left = right;
    right = r;
else:
  left = diff_s[0];
  right = diff_s[1];
  while True:
    r = left % right;
    if r == 0:
      cd = right;
      break;
    left = right;
    right = r;
  for i in range(2, len(diff_s)):
    left = diff_s[0];
    right = diff_s[i];
    while True:
      r = left % right;
      if r == 0:
        if right < cd:
          cd = right;
        break;
      left = right;
      right = r;
if cd == 0:
  print(0);
else:
  add = 0;
  for i in range(N-1):
    add += (diffs[i] // cd) -1
  print(add);

(6)
# 에라토스테네스
import math
for i in range(int(input())):
  least = int(input());
  if least < 3:
    print(2);
    continue;
  prime = 0;
  while prime == 0:
    prime = 1;
    for k in range(2, int(math.sqrt(least)) + 1):
      if least % k == 0:
        prime = 0;
        least += 1;
        break;
  print(least);

(7)
import math
M, N = map(int, input().split());
origin = set(range(M,N+1));
origin = origin - {1};
for i in range(2, int(math.sqrt(N)) + 1):
  origin = origin - (set(range(i, N+1, i)) - {i});
for prime in sorted(list(origin)):
  print(prime);

(8)
import math
while True:
  N = int(input());
  count = set(range(1, 2*N+1));
  if N == 0:
    break
  for i in range(2, int(math.sqrt(2*N))+1):
    count -= set(range(i, 2*N+1, i));
  count -= set(range(1, N+1));
  print(len(count));

(9)
# 골드바흐 파티션
# in []는 index별로 순회하는 알고리즘이기 때문에, 시간복잡도가 n으로서
# []의 length가 클 수록, 이에 대한 반복문은 큰 비효율을 초래
# 하지만, 집합 {}의 경우, 해시테이블을 통해 구현되었기에 in 메소드의 시간복잡도가 1.
# 따라서, 반복문을 통해 반복적 검색을 할 때, set로서 검색을 해야한다.
import math
count = int(input());
tests = [];
max = 0;

for _ in range(count):
  num = int(input());
  tests.append(num);
  if num > max:
    max = num;

prime = set(range(2,  max+1));
for i in range(2, int(math.sqrt(max))+1):
  prime -= set(range(i, max+1, i)) - {i};

for t in tests:
  c = 0;
  for p in prime:
    if p > t/2:
      break;
    if t - p in prime:
      c += 1;
  print(c);

(10)
# 창문 닫기
# 창문이 계속 열려 있기 위해선, 1과 자기자신을 포함한 약수가 홀수개이어야 하고
# 배수가 두 수의 짝으로 이루어진 점을 고려하면, 약수가 홀수개수이기 위해서는
# 어느 수의 제곱이어야 한다.
import math
print(int(math.sqrt(int(input()))))

