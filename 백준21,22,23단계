{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["1BnU6Wluf9b3"],"authorship_tag":"ABX9TyM189hArDO51uvOIADxUrhd"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#백트래킹"],"metadata":{"id":"1BnU6Wluf9b3"}},{"cell_type":"code","source":["# N과 M (1)\n","# DepthFirstSearch\n","# 재귀적 알고리즘과 스택 자료구조로 풀어나가기!\n","def tracking(nums, stack, target):\n","  for i in range(len(nums)):\n","    if nums[i] not in stack:\n","      stack.append(nums[i])\n","      if len(stack)<target:\n","        tracking(nums, stack, target)\n","        stack.pop()\n","      elif len(stack)==target:\n","        for num in stack:\n","          print(num, end=\" \")\n","        print(\"\")\n","        stack.pop()\n","N,M=map(int, input().split())\n","nums=[i for i in range(1,N+1)]\n","tracking(nums, [], M)"],"metadata":{"id":"u72tPJIXw-Jx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# N과 M (2)\n","def track(nums, stack, end, target):\n","  for num in nums:\n","    add=0\n","    if len(stack)==0:\n","      stack.append(num)\n","      add=1\n","    else:\n","      if len(stack)==0:\n","        return\n","      if num > stack[-1]:\n","        stack.append(num)\n","        add=1\n","    if add==1:\n","      if len(stack) < target:\n","        stack = track(nums, stack, end, target)\n","        stack.pop()\n","      elif len(stack)==target:\n","        for i in range(len(stack)):\n","          print(stack[i], end=\" \")\n","        print(\"\")\n","        stack.pop()\n","  return stack\n","N,M=map(int, input().split())\n","nums=[i for i in range(1, N+1)]\n","nums=track(nums, [], N, M)"],"metadata":{"id":"5jJ6QFu8hj1e"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# N과 M (3)\n","def tracking(nums, stack, target):\n","  for num in nums:\n","    stack.append(num)\n","    if len(stack)<target:\n","      tracking(nums, stack, target)\n","      stack.pop()\n","    elif len(stack)==target:\n","      for num in stack:\n","        print(num, end=\" \")\n","      print(\"\")\n","      stack.pop()\n","N,M=map(int, input().split())\n","nums=[i for i in range(1,N+1)]\n","tracking(nums, [], M)"],"metadata":{"id":"74Qr6ral9OXL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# N과 M (4)\n","def track(nums, stack, target):\n","  for num in nums:\n","    add=0\n","    if len(stack)==0:\n","      stack.append(num)\n","      add=1\n","    elif num>=stack[-1]:\n","      stack.append(num)\n","      add=1\n","    if add==1:\n","      if len(stack)<target:\n","        track(nums, stack, target)\n","        stack.pop()\n","      elif len(stack)==target:\n","        for num in stack:\n","          print(num, end=\" \")\n","        print(\"\")\n","        stack.pop()\n","N,M=map(int, input().split())\n","nums=[i for i in range(1, N+1)]\n","track(nums, [], M)"],"metadata":{"id":"BY-ahvOQIiiu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# N-Queen\n","from collections import deque\n","def Queen(N, ys, row, sum):\n","  y_set=set(ys)\n","  for i in range(row, row+1):\n","    for j in range(1, N+1):\n","      if len(ys)==0:\n","        ys.append(j)\n","        sum=Queen(N, ys, i+1, sum)\n","        ys.pop()\n","      else:\n","        if j not in y_set:\n","          can=1\n","          for d in range(len(ys)):\n","            ratio=(d+1-i)/(ys[d]-j)\n","            if ratio==1 or ratio==-1:\n","              can=0\n","              break\n","          if can==1:\n","            ys.append(j)\n","            if len(ys)<N:\n","              sum=Queen(N, ys, i+1, sum)\n","              ys.pop()\n","            elif len(ys)==N:\n","              sum+=1\n","              ys.pop()\n","  return sum\n","N=int(input())\n","if N==1:\n","  print(1)\n","elif N==2:\n","  print(0)\n","elif N==3:\n","  print(0)\n","else:\n","  sum=Queen(N, deque(), 1, 0)\n","  print(sum)"],"metadata":{"id":"JOD4Br-2J8n9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 스도쿠 \n","def fill(sdoku, zeros, section):\n","  nums=set(range(1,10))\n","  row=set(sdoku[zeros[0][0]-1])\n","  col=set()\n","  for i in range(9):\n","    col.add(sdoku[i][zeros[0][1]-1])\n","  nums-=row\n","  nums-=col\n","  section_i=3*((zeros[0][0]-1)//3)+((zeros[0][1]-1)//3)+1\n","  nums-=section[section_i]\n","  for num in list(nums):\n","    sdoku[zeros[0][0]-1][zeros[0][1]-1]=num\n","    if len(zeros[1:])>0:\n","      section[section_i].add(num)\n","      ret=fill(sdoku, zeros[1:], section)\n","      if ret==1:\n","        return 1\n","      sdoku[zeros[0][0]-1][zeros[0][1]-1]=0\n","      section[section_i].remove(num)\n","    elif len(zeros[1:])==0:\n","      for r in sdoku:\n","        for c in r:\n","          print(c, end=\" \")\n","        print(\"\")\n","      return 1\n","\n","sdoku=list()\n","zeros=list()\n","section={1:set(), 2:set(), 3:set(), 4:set(), 5:set(),\n","         6:set(), 7:set(), 8:set(), 9:set()}\n","for i in range(9):\n","  row = list(map(int, input().split()))\n","  sdoku.append(row)\n","  for j in range(9):\n","    if row[j]==0:\n","      zeros.append([i+1, j+1])\n","    section[3*(i//3)+(j//3)+1].add(row[j])\n","ret=fill(sdoku, zeros, section)"],"metadata":{"id":"Eminft1aAEy9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 연산자 끼워넣기\n","\n","# (정리 1) 리스트의 슬라이싱은 시간복잡도 O(N)\n","# (정리 2) 딕셔너리의 경우 반복문을 제하고는 시간복잡도가 모두 O(1)\n","# (정리 3) 시간 초과가 뜰 경우, 딕셔너리를 사용할 방법은 없는지 고민!\n","\n","# list[0:i] + list[i+1:]의 시간복잡도는\n","# i+ N-1-i-1+1 로서\n","# N-1, 즉 슬라이싱은 O(N)의 시간복잡도를 가지기 때문에\n","# 리스트에서 하나의 중간요소만을 빼기 위해 슬라이싱을 하는 것은 시간효율이 좋지않아\n","# 따라서, 이 문제에서는 애초에 연산자를 저장하는 자료구조를 Dict로 선언하여\n","# pop(element) dict[element] dict.keys() 등을 활용\n","\n","import sys\n","\n","def inserting(nums, ops, ongo, index, max, min):\n","  origin=ongo\n","  key_origin=list(ops.keys())\n","  for o in key_origin:\n","    ongo=eval(\"%d%c%d\" %(ongo, o, nums[index]))\n","    \n","    ops[o]-=1\n","    if ops[o]==0:\n","      temp=ops.pop(o)\n","\n","    if len(ops.keys())==0:\n","      if ongo > max:\n","        max=ongo\n","      if ongo < min:\n","        min=ongo\n","      ops[o]=1\n","      return max, min\n","    \n","    max,min = inserting(nums, ops, ongo, index+1, max, min)\n","\n","    ongo=origin\n","    if o in ops.keys():\n","      ops[o]+=1\n","    else:\n","      ops[o]=1\n","  return max, min\n","\n","N=int(input())\n","nums=list(map(int, input().split()))\n","count=list(map(int, input().split()))\n","ops=dict()\n","if count[0]!=0:\n","  ops['+']=count[0]\n","if count[1]!=0:\n","  ops['-']=count[1]\n","if count[2]!=0:\n","  ops['*']=count[2]\n","if count[3]!=0:\n","  ops['/']=count[3]\n","max, min = inserting(nums, ops, nums[0], 1, -sys.maxsize, sys.maxsize)\n","print(\"%d\\n%d\" %(max, min))"],"metadata":{"id":"LPSDYEMSgsE1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 스타트와 링크\n","def score_diff(ability, N, nums, min, start):\n","  for i in range(int(start[-1])+1, int(N/2)+len(start)+2):\n","    start.append(nums[i-1])\n","    if len(start)==N/2:\n","      ss, ls, score = 0,0,0\n","      link=list(set(range(1,N+1))-set(start))\n","      for p in range(0,len(start)-1):\n","        for q in range(p+1, len(start)):\n","          ss+=ability[start[p]-1][start[q]-1]\n","          ss+=ability[start[q]-1][start[p]-1]\n","          ls+=ability[link[p]-1][link[q]-1]\n","          ls+=ability[link[q]-1][link[p]-1]\n","      score=ss-ls\n","      if score<0:\n","        score*=-1\n","      if score<min:\n","        min=score\n","    else:\n","      temp=score_diff(ability, N, nums, min, start)\n","      if temp<min:\n","        min=temp\n","    tong=start.pop()\n","  return min\n","\n","ability=[]\n","N=int(input())\n","for _ in range(N):\n","  ability.append(list(map(int, input().split())))\n","min=score_diff(ability, N, list(range(1, N+1)), 20000, [1])\n","print(min)"],"metadata":{"id":"iJEj08hz21KC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#동적 계획법 1\n","\n"," 핵심원리 2가지\n","\n","(1) 최적성의 원리\n","  하위 문제의 '최적해'가 상위문제의 '최적해'로서 점화식 또는 관계를 가지고 이어진다는 것.\n","\n","(2) 점화식 또는 관계를 나타내는데 있어, 메모이제이션과 태뷸레이션을 활용하여, 이전 값 필요 시, 추가적 연산 없이 바로 호출 가능"],"metadata":{"id":"Lgc8mN0lZ0pf"}},{"cell_type":"markdown","source":["따라서, 동적 계획법 문제를 풀 시에는,\n","메모이제이션 또는 태뷸레이션의 각 칸에 \"최적해\"를 저장하고, 각 칸의 인덱스 또는 키값에는 무슨 데이터를 저장할 것으로 생각할지 정하기.\n","\n"," 예를 들어 냅색 문제의 경우에는, 각 칸에 들어가는 것이 최대화할 \"가치\"이고, 이를 2차원의 테뷸레이션에 저장할 시, ROW와COLUMN은 '물건의종류', '허용무게'가 될것이다.\n","\n"," 또 하나의 예시로, LargestCommonSubsequence의 경우, 태뷸레이션 될 값은, 최대길이가 될 것이고, 2차원의 태뷸레이션의 ROW와COLUMN은\n","'A문자열의INDEX', 'B문자열의INDEX'가 될것이다."],"metadata":{"id":"cIfcMw2SUN8D"}},{"cell_type":"code","source":["# 알고리즘 수업 - 피보나치 수 1\n","N=int(input())\n","def recursion(N,count):\n","  global count1\n","  if N<3:\n","    return count+1\n","  return count+ recursion(N-1, count) + recursion(N-2, count)\n","def dynamic(N, count):\n","  global count2\n","  memo=[0]*N\n","  memo[0],memo[1] = 1, 1\n","  for i in range(2, N):\n","    memo[i] = memo[i-1]+memo[i-2]\n","    count+=1\n","  return count\n","print(recursion(N,0), dynamic(N,0))"],"metadata":{"id":"YwXtZts6Z3Kr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 신나는 함수 실행\n","def w(a,b,c, memo):\n","  if a<=0 or b<=0 or c<=0:\n","    return 1, memo\n","  key=str(a)+'/'+str(b)+'/'+str(c)\n","  if key in memo.keys():\n","    return memo[key], memo\n","  if a >20 or b >20 or c>20:\n","    num=w(20,20,20, memo)[0]\n","    memo[key]=num\n","    return num, memo\n","  if a<b and b<c:\n","    num=w(a,b,c-1, memo)[0] + w(a,b-1,c-1, memo)[0] - w(a,b-1,c, memo)[0]\n","    memo[key]=num\n","    return num, memo\n","  else:\n","    num=w(a-1, b, c, memo)[0] + w(a-1, b-1, c, memo)[0] + w(a-1, b, c-1, memo)[0] - w(a-1, b-1, c-1, memo)[0]\n","    memo[key]=num\n","    return num, memo\n","memo={}\n","while True:\n","  a,b,c=map(int, input().split())\n","  if a==-1 and b==-1 and c==-1:\n","    break\n","  num,memo=w(a,b,c, memo)\n","  print(\"w(%d, %d, %d) = %d\" %(a,b,c,num))\n"],"metadata":{"id":"JLttzeWIcOA_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 01타일\n","# 숫자가 클 경우, 메모리도 많이 차지하고, 연산하는데 시간도 많이 걸린다.\n","# 숫자는 논리적 오류가 생기지 않는 한에서 가능한 작게 저장한다.\n","\"\"\"\n","https://fuzzysound.github.io/sys-setrecursionlimit\n","(N==1,2 제외) N-1의 뒤에 1을 붙인 것 + N-2의 뒤에 00을 붙인 것\n","N=1 1\n","N=2 11 00\n","N=3 111 001 100\n","N=4 1111 0011 1001  0000 1100\n","N=5 11111 00111 10011 00001 11001 11100 00100 10000\n","N=6 111111 001111 100111 000011 110011 111001  001001 100001 111100 001100  110000   100100  000000\n","\"\"\"\n","import sys\n","num=int(sys.stdin.readline())\n","counts=[0]*1000000\n","counts[0], counts[1] = 1, 2\n","for i in range(2, num):\n","  counts[i]=(counts[i-2]+counts[i-1])%15746\n","print(counts[num-1]%15746)"],"metadata":{"id":"HISi3rL2fUDf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 파도반 수열 \n","# f(n-1) + f(n-5)\n","lens=[1,1,1,2,2]\n","for i in range(int(input())):\n","  N=int(input())\n","  if N-1>=len(lens):\n","    for k in range(len(lens), N+1):\n","      lens.append(lens[k-1]+lens[k-5])\n","  print(lens[N-1])"],"metadata":{"id":"uXubZ5D_3fGd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 연속합\n","# 다이내믹 프로그래밍으로 풀지 않아도, 시간적 효율이 좋을 수도 있다.\n","N=int(input())\n","nums=list(map(int, input().split()))\n","max=-1001\n","ongo=0\n","for num in nums:\n","  if num>0:\n","    if max==-1001:\n","      max=num\n","      ongo=num\n","    else:\n","      ongo+=num\n","      if ongo>max:\n","        max=ongo\n","  else:\n","    ongo+=num\n","    if ongo<0:\n","      ongo=0\n","    if max<num:\n","      max=num\n","print(max)"],"metadata":{"id":"gp0bbCBhaOEf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# RGB거리\n","# 주어진 변수를 작게 하여 소문제로 세분화한다음\n","# 소문제를 해결한 논리를 큰 문제를 해결하는 논리로 귀결한다.\n","N=int(input())\n","houses=[]\n","houses.append(list(map(int, input().split())))\n","for i in range(1,N):\n","  R,G,B=map(int, input().split())\n","  temp=[]\n","  temp.append(min(R+houses[i-1][1], R+houses[i-1][2]))\n","  temp.append(min(G+houses[i-1][0], G+houses[i-1][2]))\n","  temp.append(min(B+houses[i-1][0], B+houses[i-1][1]))\n","  houses.append(temp)\n","print(min(houses[N-1]))"],"metadata":{"id":"KS2SyN36cF7X"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 정수 삼각형\n","N=int(input())\n","tri=[]\n","for i in range(N):\n","  tri.append(list(map(int, input().split())))\n","for i in range(N-1):\n","  for e in range(i+1):\n","    if e==0:\n","      tri[i+1][e]+=tri[i][e]\n","      tri[i+1][e+1]+=tri[i][e]\n","    else:\n","      new=tri[i][e]+(tri[i+1][e]-tri[i][e-1])\n","      if tri[i+1][e]<new:\n","        tri[i+1][e]=new\n","      tri[i+1][e+1]+=tri[i][e]\n","print(max(tri[-1]))"],"metadata":{"id":"uZTv-2r1hDWd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 계단 오르기\n","\"\"\"\n","N-2를 밟은 값 (N-2까지의 최댓값 + N)\n","N-1을 밟은 값 (N-3까지의 최댓값 + N-1 + N)\n","\"\"\"\n","N=int(input())\n","scos=[int(input()) for _ in range(N)]\n","if N<3:\n","  print(sum(scos))\n","else:\n","  n_2=scos[0]+scos[2]\n","  n_1=scos[1]+scos[2]\n","  if N==3:\n","    if n_2>n_1:\n","      print(n_2)\n","    else:\n","      print(n_1)\n","  else:\n","    scos[1]=scos[0]+scos[1]\n","    if n_2>n_1:\n","      temp=n_2\n","    else:\n","      temp=n_1\n","    for i in range(3, N):\n","      n_2=scos[i-2]+scos[i]\n","      n_1=scos[i-3]+scos[i-1]+scos[i]\n","      scos[i-1]=temp\n","      if n_2>n_1:\n","        temp=n_2\n","      else:\n","        temp=n_1\n","    print(temp)"],"metadata":{"id":"qJ5GyAf8oFW5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 1로 만들기\n","# Dict형 메모리제이션을 통해 저장해두기\n","# 완전탐색할 시, 시간초과가 뜰 경우\n","# 중복탐색시간을 메모리제이션을 통해 줄여야한다.\n","memo={1:0}\n","def reduce(N):\n","  global memo\n","  if N in memo.keys():\n","    return memo[N]\n","  if N%3==0:\n","    if N%2==0:\n","      memo[N]=min([reduce(N/3)+1, reduce(N/2)+1])\n","      return memo[N]\n","    else:\n","      memo[N]=min([reduce(N/3)+1, reduce(N-1)+1])\n","      return memo[N]\n","  else:\n","    if N%2==0:\n","      memo[N]=min([reduce(N/2)+1, reduce(N-1)+1])\n","      return memo[N]\n","    else:\n","      memo[N]=reduce(N-1)+1\n","      return memo[N]\n","num=int(input())\n","reduce(num)"],"metadata":{"id":"dSUzpTuswxr1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 쉬운 계단 수\n","# Memoization, Tabulation 1차원리스트,2차원리스트,딕셔너리 등 상황에 맞게 사용!\n","# 딕셔너리가 동일 데이터의 갯수 등을 저장할 경우\n","# 적은 공간복잡도를 지니기에, 그에 따라 자료구조에 대한 연산도\n","# 적은 시간복잡도를 지닌다. \n","N=int(input())\n","stairs={\n","    0:0, 1:1, 2:1, 3:1, 4:1, \n","    5:1, 6:1, 7:1, 8:1, 9:1\n","}\n","for i in range(N-1):\n","  new={0:0, 1:0, 2:0, 3:0, 4:0, \n","    5:0, 6:0, 7:0, 8:0, 9:0}\n","  for last in stairs.keys():\n","    if last==0:\n","      new[1]+=stairs[last]\n","    elif last==9:\n","      new[8]+=stairs[last]\n","    else:\n","      new[last+1]+=stairs[last]\n","      new[last-1]+=stairs[last]\n","  stairs.clear()\n","  stairs=new\n","total=0\n","for k in stairs.keys():\n","  total+=stairs[k]\n","print(int(total%1000000000))"],"metadata":{"id":"QR0qN5kG859Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 포도주\n","\"\"\"\n","N-1 최댓값이 연속일 경우\n","  둘 중 비교\n","(1) N-1최댓값\n","(2) N-2최댓값 + N\n","(3) N-3최댓값 + N-1 + N\n","연속이 아닐 경우\n","(1) N-1최대값 + N\n","\"\"\"\n","N=int(input())\n","amounts=[]\n","for _ in range(N):\n","  amounts.append(int(input()))\n","if N<3:\n","  print(sum(amounts))\n","else:\n","  sum0_1=amounts[0]+amounts[1]\n","  sum0_2=amounts[0]+amounts[2]\n","  sum1_2=amounts[1]+amounts[2]\n","  if N==3:\n","    print(max([sum0_1, sum0_2, sum1_2]))\n","  else:\n","    cur={}\n","    if sum0_1>sum0_2 and sum0_1>sum1_2:\n","      cur[0]=amounts[0]\n","      cur[1]=amounts[1]\n","    elif sum0_2>sum0_1 and sum0_2>sum1_2:\n","      cur[0]=amounts[0]\n","      cur[2]=amounts[2]\n","    else:\n","      cur[1]=amounts[1]\n","      cur[2]=amounts[2]\n","    amounts[1]=amounts[0]+amounts[1]\n","    for i in range(3, N):\n","      cur_nums=list(cur.keys())\n","      if i-2 in cur_nums and i-1 in cur_nums:\n","        fir=0\n","        for num in cur_nums:\n","          fir+=cur[num]\n","        sec=amounts[i-2]+amounts[i]\n","        thir=amounts[i-3]+amounts[i-1]+amounts[i]\n","        if sec > fir and sec>thir:\n","          cur.clear()\n","          cur[i-2]=amounts[i-2]\n","          cur[i]=amounts[i]\n","        elif thir>fir and thir>sec:\n","          cur.clear()\n","          cur[i-3]=amounts[i-3]\n","          cur[i-1]=amounts[i-1]\n","          cur[i]=amounts[i]\n","        elif sec==thir and sec>fir:\n","          cur.clear()\n","          cur[i-2]=amounts[i-2]\n","          cur[i]=amounts[i]\n","        amounts[i-1]=fir\n","      else:\n","        fir=0\n","        for num in list(cur.keys()):\n","          fir+=cur[num]\n","        amounts[i-1]=fir\n","        cur[i]=amounts[i]\n","    total=0\n","    for k in cur.keys():\n","      total+=cur[k]\n","    print(total)"],"metadata":{"id":"MCwggyb5gK-5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 가장 긴 증가하는 부분 수열\n","# 1 2 5 50 15 16 17 18 19\n","# 숫자가 들어오면 해당 자리 숫자의 최대길이값 저장\n","N=int(input())\n","nums=list(map(int, input().split()))\n","memo={nums[0]:1}\n","for i in range(1, N):\n","  max=0\n","  for last in list(memo.keys()):\n","    if last<nums[i]:\n","      if memo[last]>max:\n","        max=memo[last]\n","  memo[nums[i]]=max+1\n","print(sorted(memo.values())[-1])"],"metadata":{"id":"RpLTdpjtHwA6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 가장 긴 바이토닉 부분 수열\n","# leftLength rightLength\n","# 즉 바이토닉의 좌측과 우측을 두번의 반복을 통해 따로 구한다\n","# (1) 좌측(0~N-1) (2) 우측(N-1~0)\n","N=int(input())\n","nums=list(map(int, input().split()))\n","# index : [lastValue, leftLength, rightLength]\n","memo={0: [nums[0], 1, 0]}\n","answ=0\n","# leftLength\n","for i in range(1,N):\n","  max=0\n","  for index in list(memo.keys()):\n","    if memo[index][0]<nums[i] and memo[index][1]>max:\n","      max=memo[index][1]\n","  memo[i]=[nums[i], max+1, 0]\n","# rightLength\n","memo[N-1][2]=1\n","for i in range(N-1,-1, -1):\n","  leng=0\n","  for k in range(N-1-i):\n","    if memo[N-1-k][0]<memo[i][0] and memo[N-1-k][2]>leng:\n","      leng=memo[N-1-k][2]\n","    memo[i][2]=leng+1\n","  if memo[i][1]+memo[i][2]-1>answ:\n","    answ=memo[i][1]+memo[i][2]-1\n","print(answ)"],"metadata":{"id":"vlnWo8gkoDKe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 전깃줄\n","N=int(input())\n","lines=[]\n","dp=[1]*N\n","for n in range(N):\n","  lines.append(list(map(int, input().split())))\n","lines=sorted(lines, key=lambda x:x[0])\n","for n in range(N):\n","  for k in range(n):\n","    if lines[k][1]<lines[n][1]:\n","      dp[n]=max(dp[n], dp[k]+1)\n","print(N-max(dp))"],"metadata":{"id":"OiWReM_k1gXc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# LCS\n","X=input()\n","Y=input()\n","dp= [[0]*(len(Y)+1) for _ in range(len(X)+1)]\n","for i in range(len(X)):\n","  for k in range(len(Y)):\n","    if X[i]==Y[k]:\n","      dp[i+1][k+1]=dp[i][k]+1\n","    else:\n","      dp[i+1][k+1]=max(dp[i+1][k], dp[i][k+1])\n","print(dp[-1][-1])"],"metadata":{"id":"cborfYyJXtO-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 평범한 배낭\n","# 3,6   4,8   5,12  6,13\n","N,K=map(int, input().split())\n","goods=[list(map(int, input().split())) for n in range(N)]\n","memo=[[0]*(K+1) for n in range(N+1)]\n","for n in range(1,N+1):\n","  w,v = goods[n-1]\n","  for k in range(1, K+1):\n","    if w>k:\n","      memo[n][k]=memo[n-1][k]\n","    else:\n","      memo[n][k]=max(memo[n-1][k], v+memo[n-1][k-w])\n","print(memo[-1][-1])"],"metadata":{"id":"dI-RLOU-Z3W-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#누적 합"],"metadata":{"id":"mGKO_e2xKkpj"}},{"cell_type":"code","source":["# 구간 합 구하기 4\n"],"metadata":{"id":"AX-rSwL1KlSp"},"execution_count":null,"outputs":[]}]}